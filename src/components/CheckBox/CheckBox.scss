/*
 * Checkbox element
 * ==========================================
 * Primary <input> element which recieves all
 * events.
 */

.checkbox {
    appearance: none;
    margin: 0;
    width: 20px;
    height: 20px;
    border-radius: var(--control-corner-radius);
    background-color: var(--ControlAltFillColorSecondary);
    box-shadow: inset 0 0 0 1px var(--ControlStrongStrokeColorDefault);

    // Checked state
    &:checked {
        box-shadow: none;
        background-color: var(--accent-color-default);

        // Unhide and transition the checkmark glyph
        + .checkbox-glyph .path-checkmark {
            transition: 266ms cubic-bezier(0.55, 0, 0, 1) stroke-dashoffset;
            stroke-dashoffset: 0;
        }
    }

    // Disabled state
    &:disabled {
        box-shadow: inset 0 0 0 1px var(--ControlStrongStrokeColorDisabled);
        background-color: var(--ControlAltFillColorDisabled);

        // Checked + disabled state
        &:checked {
            box-shadow: inset 0 0 0 1px var(--ControlStrongStrokeColorDisabled);
            background-color: var(--AccentFillColorDisabled);

            // Update glyph color
            + .checkbox-glyph {
                color: var(--accent-text-contrast-disabled);
            }
        }
    }
}

/*
 * Interaction states
 * ==========================================
 * To be consistent with WinUI, we need to
 * style our states through both the checkbox
 * element AND label container
 */

// Hover state
.checkbox-container:hover .checkbox:not(:checked),
.checkbox:not(:checked):hover {
    background-color: var(--ControlAltFillColorTertiary);
}

// Active (pressed) state
.checkbox-container:active .checkbox:not(:checked),
.checkbox:not(:checked):active {
    box-shadow: inset 0 0 0 1px var(--ControlStrongStrokeColorDisabled);
    background-color: var(--ControlAltFillColorQuarternary);
}

// Checked + hover state
.checkbox-container:hover .checkbox:checked,
.checkbox:checked:hover {
    background-color: var(--accent-color-secondary);
}

// Checked + active (pressed) state
.checkbox-container:active .checkbox:checked,
.checkbox:checked:active {
    background-color: var(--accent-color-tertiary);

    // Update glyph color
    + .checkbox-glyph {
        color: var(--accent-text-contrast-secondary);
    }
}

/*
 * Checkbox glyph
 * ==========================================
 * Symbol displayed when the checkbox is in
 * its checked state.
 */

.checkbox-glyph {
    color: var(--accent-text-contrast-primary);
    position: absolute;
    width: 12px;
    height: 12px;

    // Inner glyph <path> element
    path {
        transform: scale(0.7);
        transform-origin: center;
        stroke: currentColor;
        stroke-linecap: round;
        stroke-linejoin: round;
    }

    // Inner checkmark <path> element
    // Only displays on non-indeterminate checkboxes
    .path-checkmark {
        stroke-width: 2.45;
        stroke-dasharray: 32;
        stroke-dashoffset: 32;
    }

    // Inner indeterminate <path> element
    // Only displays on indeterminate checkboxes
    .path-indeterminate {
        stroke-width: 1;
    }
}

/*
 * Checkbox outer container
 * ==========================================
 * Contains the label and checkbox inner
 * container.
 */

.checkbox-container {
    user-select: none;
    display: flex;
    align-items: center;
    min-height: 32px;
    min-width: 120px;
    color: var(--text-color-primary);
    font: {
        weight: normal;
        family: var(--control-font-family);
        size: var(--control-font-size);
    }
    &.disabled {
        pointer-events: none;
        span {
            color: var(--text-color-disabled);
        }
    }
    span {
        margin-left: 8px;
    }
}

/*
 * Checkbox inner container
 * ==========================================
 * Ensures that the checkbox glyph and
 * checkbox element are properly aligned.
  */

.checkbox-inner {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
}